#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–±–∞–≥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–º–µ—Ä—ã –∏–∑ ROS bag
–¢–æ–ø–∏–∫–∏:
  - /mavros/cam_imu_sync/cam_imu_stamp (—Ç–∏–ø mavros_msgs/CamIMUStamp) - –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞
  - /mavros/statustext/send (—Ç–∏–ø mavros_msgs/StatusText) - –∏–º—è —Ñ–∞–π–ª–∞
  - –¢–æ–ø–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
"""

import rosbag
import os
from datetime import datetime
from collections import defaultdict
import json


def analyze_bag_topics(bag_file):
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø–∏–∫–æ–≤ –≤ ROS bag —Ñ–∞–π–ª–µ.
    """
    print("=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –¢–û–ü–ò–ö–û–í –í BAG –§–ê–ô–õ–ï")
    print("=" * 80)
    
    topics_info = defaultdict(lambda: {"count": 0, "type": None, "first_time": None, "last_time": None})
    
    with rosbag.Bag(bag_file, 'r') as bag:
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–∞—Ö
        bag_info = bag.get_type_and_topic_info()
        
        print(f"\nüì¶ –§–∞–π–ª: {os.path.basename(bag_file)}")
        print(f"üïê –ù–∞—á–∞–ª–æ: {datetime.fromtimestamp(bag.get_start_time())}")
        print(f"üïë –ö–æ–Ω–µ—Ü: {datetime.fromtimestamp(bag.get_end_time())}")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {bag.get_end_time() - bag.get_start_time():.2f} —Å–µ–∫")
        print(f"\nüìã –í—Å–µ–≥–æ —Ç–æ–ø–∏–∫–æ–≤: {len(bag_info.topics)}")
        print("-" * 80)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–ø–∏–∫–∏
        for topic, info in bag_info.topics.items():
            topics_info[topic]["count"] = info.message_count
            topics_info[topic]["type"] = info.msg_type
            topics_info[topic]["frequency"] = info.frequency
        
        # –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–∞—Ö
        print(f"\n{'–¢–æ–ø–∏–∫':<50} {'–¢–∏–ø':<35} {'–ö–æ–ª-–≤–æ':<10}")
        print("-" * 95)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ç–æ–ø–∏–∫–∞
        for topic in sorted(topics_info.keys()):
            info = topics_info[topic]
            print(f"{topic:<50} {info['type']:<35} {info['count']:<10}")
    
    return topics_info


def debug_camera_messages(bag_file, max_messages=50):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã.
    
    Parameters:
        bag_file: –ü—É—Ç—å –∫ ROS bag —Ñ–∞–π–ª—É
        max_messages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    print("\n" + "=" * 80)
    print("üîç –û–¢–õ–ê–î–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ö–ê–ú–ï–†–´")
    print("=" * 80)
    
    # –¢–æ–ø–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    cam_imu_topic = "/mavros/cam_imu_sync/cam_imu_stamp"
    statustext_topic = "/mavros/statustext/send"
    
    cam_messages = []
    status_messages = []
    
    with rosbag.Bag(bag_file, 'r') as bag:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ø–∏–∫–æ–≤
        bag_info = bag.get_type_and_topic_info()
        
        has_cam_imu = cam_imu_topic in bag_info.topics
        has_statustext = statustext_topic in bag_info.topics
        
        print(f"\n‚úì –¢–æ–ø–∏–∫ {cam_imu_topic}: {'–ù–ê–ô–î–ï–ù' if has_cam_imu else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        if has_cam_imu:
            print(f"  –¢–∏–ø: {bag_info.topics[cam_imu_topic].msg_type}")
            print(f"  –°–æ–æ–±—â–µ–Ω–∏–π: {bag_info.topics[cam_imu_topic].message_count}")
        
        print(f"\n‚úì –¢–æ–ø–∏–∫ {statustext_topic}: {'–ù–ê–ô–î–ï–ù' if has_statustext else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        if has_statustext:
            print(f"  –¢–∏–ø: {bag_info.topics[statustext_topic].msg_type}")
            print(f"  –°–æ–æ–±—â–µ–Ω–∏–π: {bag_info.topics[statustext_topic].message_count}")
        
        if not (has_cam_imu or has_statustext):
            print("\n‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω –∏–∑ –Ω—É–∂–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å. {max_messages} –Ω–∞ —Ç–æ–ø–∏–∫)...")
        
        topics_to_read = []
        if has_cam_imu:
            topics_to_read.append(cam_imu_topic)
        if has_statustext:
            topics_to_read.append(statustext_topic)
        
        for msg_tuple in bag.read_messages(topics=topics_to_read):
            topic = msg_tuple.topic
            msg = msg_tuple.message
            t = msg_tuple.timestamp
            
            if topic == cam_imu_topic and len(cam_messages) < max_messages:
                cam_messages.append({
                    'timestamp': t.to_sec(),
                    'ros_time': t,
                    'message': msg
                })
            elif topic == statustext_topic and len(status_messages) < max_messages:
                status_messages.append({
                    'timestamp': t.to_sec(),
                    'ros_time': t,
                    'message': msg
                })
            
            # –ü—Ä–µ—Ä–≤–∞—Ç—å –µ—Å–ª–∏ —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            if len(cam_messages) >= max_messages and len(status_messages) >= max_messages:
                break
    
    # –í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è cam_imu_sync
    if cam_messages:
        print(f"\n" + "=" * 80)
        print(f"üì∏ CAM_IMU_SYNC –°–û–û–ë–©–ï–ù–ò–Ø (–ø–µ—Ä–≤—ã–µ {len(cam_messages)}):")
        print("=" * 80)
        
        for i, msg_data in enumerate(cam_messages[:10], 1):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
            msg = msg_data['message']
            timestamp = msg_data['timestamp']
            
            print(f"\n[{i}] –í—Ä–µ–º—è bag: {datetime.fromtimestamp(timestamp)}")
            print(f"    ROS timestamp: {timestamp}")
            
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                print(f"    –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(msg).__name__}")
                print(f"    –ü–æ–ª—è: {[slot for slot in msg.__slots__]}")
                
                # –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
                for slot in msg.__slots__:
                    value = getattr(msg, slot, None)
                    if value is not None:
                        # –ï—Å–ª–∏ —ç—Ç–æ ROS Time, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                        if hasattr(value, 'to_sec'):
                            print(f"    {slot}: {value.to_sec()} ({datetime.fromtimestamp(value.to_sec())})")
                        else:
                            print(f"    {slot}: {value}")
            except Exception as e:
                print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
                print(f"    –°—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
    else:
        print("\n‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–π cam_imu_sync –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è statustext
    if status_messages:
        print(f"\n" + "=" * 80)
        print(f"üìù STATUSTEXT –°–û–û–ë–©–ï–ù–ò–Ø (–ø–µ—Ä–≤—ã–µ {len(status_messages)}):")
        print("=" * 80)
        
        for i, msg_data in enumerate(status_messages[:10], 1):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
            msg = msg_data['message']
            timestamp = msg_data['timestamp']
            
            print(f"\n[{i}] –í—Ä–µ–º—è bag: {datetime.fromtimestamp(timestamp)}")
            print(f"    ROS timestamp: {timestamp}")
            
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                print(f"    –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(msg).__name__}")
                print(f"    –ü–æ–ª—è: {[slot for slot in msg.__slots__]}")
                
                # –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
                for slot in msg.__slots__:
                    value = getattr(msg, slot, None)
                    if value is not None:
                        print(f"    {slot}: {value}")
            except Exception as e:
                print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
                print(f"    –°—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
    else:
        print("\n‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–π statustext –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    if cam_messages and status_messages:
        print(f"\n" + "=" * 80)
        print("‚è±Ô∏è  –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–û–ô –ö–û–†–†–ï–õ–Ø–¶–ò–ò")
        print("=" * 80)
        
        # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\nüîó –ü–æ–∏—Å–∫ –ø–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (cam_imu + statustext –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 —Å–µ–∫):")
        
        matches = []
        for cam_msg in cam_messages[:20]:
            cam_time = cam_msg['timestamp']
            
            # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ statustext —Å–æ–æ–±—â–µ–Ω–∏–µ
            closest_status = None
            min_diff = float('inf')
            
            for status_msg in status_messages:
                status_time = status_msg['timestamp']
                time_diff = abs(cam_time - status_time)
                
                if time_diff < min_diff:
                    min_diff = time_diff
                    closest_status = status_msg
            
            if closest_status and min_diff < 1.0:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1 —Å–µ–∫—É–Ω–¥—ã
                matches.append({
                    'cam_msg': cam_msg,
                    'status_msg': closest_status,
                    'time_diff': min_diff
                })
        
        if matches:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
            for i, match in enumerate(matches[:5], 1):
                print(f"\n  [{i}] –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: {match['time_diff']*1000:.2f} –º—Å")
                print(f"      CAM –≤—Ä–µ–º—è: {datetime.fromtimestamp(match['cam_msg']['timestamp'])}")
                print(f"      STATUS –≤—Ä–µ–º—è: {datetime.fromtimestamp(match['status_msg']['timestamp'])}")
                
                # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ statustext
                try:
                    status_msg = match['status_msg']['message']
                    if hasattr(status_msg, 'text'):
                        print(f"      –¢–µ–∫—Å—Ç: {status_msg.text}")
                except:
                    pass
        else:
            print("\n‚ö†Ô∏è  –ü–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—Ä–∞–∑–Ω–∏—Ü–∞ > 1 —Å–µ–∫)")


def find_odometry_topics(bag_file):
    """
    –ü–æ–∏—Å–∫ —Ç–æ–ø–∏–∫–æ–≤ –æ–¥–æ–º–µ—Ç—Ä–∏–∏ –≤ bag —Ñ–∞–π–ª–µ.
    """
    print("\n" + "=" * 80)
    print("üéØ –ü–û–ò–°–ö –¢–û–ü–ò–ö–û–í –û–î–û–ú–ï–¢–†–ò–ò")
    print("=" * 80)
    
    odometry_topics = []
    
    with rosbag.Bag(bag_file, 'r') as bag:
        bag_info = bag.get_type_and_topic_info()
        
        # –ò—Å–∫–∞—Ç—å —Ç–æ–ø–∏–∫–∏ —Å —Ç–∏–ø–æ–º Odometry
        for topic, info in bag_info.topics.items():
            if 'Odometry' in info.msg_type or 'odometry' in topic.lower():
                odometry_topics.append({
                    'topic': topic,
                    'type': info.msg_type,
                    'count': info.message_count,
                    'frequency': info.frequency
                })
        
        if odometry_topics:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤ –æ–¥–æ–º–µ—Ç—Ä–∏–∏: {len(odometry_topics)}")
            print("-" * 80)
            print(f"{'–¢–æ–ø–∏–∫':<50} {'–¢–∏–ø':<30} {'–°–æ–æ–±—â–µ–Ω–∏–π':<12} {'–ß–∞—Å—Ç–æ—Ç–∞':<10}")
            print("-" * 80)
            
            for odom in odometry_topics:
                freq_str = f"{odom['frequency']:.1f} Hz" if odom['frequency'] else "N/A"
                print(f"{odom['topic']:<50} {odom['type']:<30} {odom['count']:<12} {freq_str:<10}")
        else:
            print("\n‚ö†Ô∏è  –¢–æ–ø–∏–∫–∏ –æ–¥–æ–º–µ—Ç—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return odometry_topics


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–∞–¥–∫–∏.
    """
    print("üé¨ –û–¢–õ–ê–î–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ú–ï–¢–û–ö –í–†–ï–ú–ï–ù–ò –ö–ê–ú–ï–†–´")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ bag —Ñ–∞–π–ª—É
    bag_file = input("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ ROS bag —Ñ–∞–π–ª—É: ").strip()
    
    # –£–±—Ä–∞—Ç—å –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    bag_file = bag_file.strip('"').strip("'")
    
    if not os.path.exists(bag_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {bag_file}")
        return
    
    if not bag_file.endswith('.bag'):
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .bag")
    
    try:
        # 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤
        topics_info = analyze_bag_topics(bag_file)
        
        # 2. –ü–æ–∏—Å–∫ —Ç–æ–ø–∏–∫–æ–≤ –æ–¥–æ–º–µ—Ç—Ä–∏–∏
        odometry_topics = find_odometry_topics(bag_file)
        
        # 3. –û—Ç–ª–∞–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã
        max_msgs = input("\nüìä –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏? (Enter –¥–ª—è 50): ").strip()
        max_msgs = int(max_msgs) if max_msgs else 50
        
        debug_camera_messages(bag_file, max_messages=max_msgs)
        
        # 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        save_results = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON? (y/n, Enter=y): ").strip().lower()
        if save_results in ['', 'y', 'yes', '–¥–∞', '–¥']:
            output_file = os.path.join(
                os.path.dirname(bag_file),
                f"camera_debug_{os.path.basename(bag_file).replace('.bag', '')}.json"
            )
            
            results = {
                'bag_file': bag_file,
                'analysis_time': datetime.now().isoformat(),
                'topics': {topic: {'type': info['type'], 'count': info['count']} 
                          for topic, info in topics_info.items()},
                'odometry_topics': odometry_topics
            }
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 80)
        
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
