#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—á–µ–∫ –∏ –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (—Å–ø–∏—Å–∫–∏ + append) —Å –Ω–æ–≤—ã–º (numpy –º–∞—Å—Å–∏–≤—ã).
"""

import numpy as np
import time
import platform

print("=" * 80)
print("üß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ò –ö–†–û–°–°-–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò")
print("=" * 80)

print(f"\nüñ•Ô∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
print(f"   ‚Ä¢ –û–°: {platform.system()} {platform.release()}")
print(f"   ‚Ä¢ Python: {platform.python_version()}")
print(f"   ‚Ä¢ NumPy: {np.__version__}")
print(f"   ‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")

# ============================================================================
# –¢–ï–°–¢ 1: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ - –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (—Å–ø–∏—Å–∫–∏)
# ============================================================================

print("\n" + "=" * 80)
print("üìä –¢–ï–°–¢ 1: –°–¢–ê–†–´–ô –ú–ï–¢–û–î (—Å–ø–∏—Å–∫–∏ + append)")
print("=" * 80)

n_messages = 1000
points_per_message = 1000
total_points = n_messages * points_per_message

print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {n_messages:,}")
print(f"   ‚Ä¢ –¢–æ—á–µ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {points_per_message:,}")
print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {total_points:,}")

# –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞
start_time = time.time()

x_list = []
y_list = []
z_list = []
intensity_list = []

for msg_idx in range(n_messages):
    # –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ç–æ—á–µ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_points = np.random.rand(points_per_message, 3).astype(np.float64) * 100
    intensities = np.random.rand(points_per_message).astype(np.float32) * 255
    
    # –°–¢–ê–†–´–ô –ú–ï–¢–û–î: append –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
    for point_idx in range(len(msg_points)):
        x_list.append(msg_points[point_idx, 0])
        y_list.append(msg_points[point_idx, 1])
        z_list.append(msg_points[point_idx, 2])
        intensity_list.append(intensities[point_idx])

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ numpy
x_array_old = np.array(x_list, dtype=np.float64)
y_array_old = np.array(y_list, dtype=np.float64)
z_array_old = np.array(z_list, dtype=np.float64)
intensity_array_old = np.array(intensity_list, dtype=np.float32)

old_time = time.time() - start_time
old_rate = total_points / old_time

print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–ê–†–û–ì–û –ú–ï–¢–û–î–ê:")
print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {old_time:.3f} —Å–µ–∫—É–Ω–¥")
print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {old_rate:,.0f} —Ç–æ—á–µ–∫/—Å–µ–∫")
print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {x_array_old.nbytes + y_array_old.nbytes + z_array_old.nbytes + intensity_array_old.nbytes:,} –±–∞–π—Ç")

# ============================================================================
# –¢–ï–°–¢ 2: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ - –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ (numpy –º–∞—Å—Å–∏–≤—ã)
# ============================================================================

print("\n" + "=" * 80)
print("üöÄ –¢–ï–°–¢ 2: –ù–û–í–´–ô –ú–ï–¢–û–î (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏)")
print("=" * 80)

start_time = time.time()

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
x_array_new = np.empty(total_points, dtype=np.float64)
y_array_new = np.empty(total_points, dtype=np.float64)
z_array_new = np.empty(total_points, dtype=np.float64)
intensity_array_new = np.empty(total_points, dtype=np.float32)

global_idx = 0
for msg_idx in range(n_messages):
    # –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ç–æ—á–µ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_points = np.random.rand(points_per_message, 3).astype(np.float64) * 100
    intensities = np.random.rand(points_per_message).astype(np.float32) * 255
    
    n_points = len(msg_points)
    
    # –ù–û–í–´–ô –ú–ï–¢–û–î: –ø—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ –º–∞—Å—Å–∏–≤
    x_array_new[global_idx:global_idx+n_points] = msg_points[:, 0]
    y_array_new[global_idx:global_idx+n_points] = msg_points[:, 1]
    z_array_new[global_idx:global_idx+n_points] = msg_points[:, 2]
    intensity_array_new[global_idx:global_idx+n_points] = intensities
    
    global_idx += n_points

new_time = time.time() - start_time
new_rate = total_points / new_time

print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–û–í–û–ì–û –ú–ï–¢–û–î–ê:")
print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {new_time:.3f} —Å–µ–∫—É–Ω–¥")
print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {new_rate:,.0f} —Ç–æ—á–µ–∫/—Å–µ–∫")
print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {x_array_new.nbytes + y_array_new.nbytes + z_array_new.nbytes + intensity_array_new.nbytes:,} –±–∞–π—Ç")

# ============================================================================
# –°–†–ê–í–ù–ï–ù–ò–ï
# ============================================================================

print("\n" + "=" * 80)
print("üìà –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í")
print("=" * 80)

speedup = old_time / new_time
print(f"\n‚ö° –£–°–ö–û–†–ï–ù–ò–ï: √ó{speedup:.1f} —Ä–∞–∑!")
print(f"   ‚Ä¢ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥: {old_time:.3f} —Å–µ–∫ ({old_rate:,.0f} —Ç–æ—á–µ–∫/—Å–µ–∫)")
print(f"   ‚Ä¢ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: {new_time:.3f} —Å–µ–∫ ({new_rate:,.0f} —Ç–æ—á–µ–∫/—Å–µ–∫)")

if speedup > 10:
    print(f"   üéâ –û–¢–õ–ò–ß–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –£—Å–∫–æ—Ä–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –≤ 10 —Ä–∞–∑!")
elif speedup > 5:
    print(f"   ‚úÖ –•–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ!")
else:
    print(f"   ‚ö†Ô∏è  –£—Å–∫–æ—Ä–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ...")

# ============================================================================
# –¢–ï–°–¢ 3: –ö–†–û–°–°-–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ scale/offset
# ============================================================================

print("\n" + "=" * 80)
print("üåç –¢–ï–°–¢ 3: –ö–†–û–°–°-–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨")
print("=" * 80)

def calculate_optimal_scale_offset(coords_array):
    """–§—É–Ω–∫—Ü–∏—è –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    min_val = np.float64(np.min(coords_array))
    max_val = np.float64(np.max(coords_array))
    coord_range = max_val - min_val
    MAX_INT32 = 2_000_000_000
    required_scale = coord_range / MAX_INT32 if coord_range > 0 else 0.001
    
    if required_scale <= 0.001:
        scale = 0.001
    elif required_scale <= 0.01:
        scale = 0.01
    elif required_scale <= 0.1:
        scale = 0.1
    else:
        scale = 1.0
    
    offset = np.float64(np.floor(min_val))
    return scale, offset

def validate_las_encoding(coords, offset, scale, coord_name="coordinate"):
    """–§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    encoded = ((coords - offset) / scale).astype(np.int64)
    min_encoded = np.min(encoded)
    max_encoded = np.max(encoded)
    
    if max_encoded > 2_147_483_647 or min_encoded < -2_147_483_648:
        raise ValueError(f"{coord_name} –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –≤ int32! Range: {min_encoded} to {max_encoded}")
    return True

# –¢–µ—Å—Ç 1: –ú–∞–ª—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
print("\nüß™ –¢–µ—Å—Ç 3.1: –ú–∞–ª—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)")
small_coords = np.random.rand(10000) * 200 - 100  # -100 to +100
scale, offset = calculate_optimal_scale_offset(small_coords)
print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: [{np.min(small_coords):.2f}, {np.max(small_coords):.2f}]")
print(f"   ‚Ä¢ Scale: {scale}, Offset: {offset:.2f}")
assert scale == 0.001, f"Expected scale 0.001, got {scale}"
validate_las_encoding(small_coords, offset, scale, "small coords")
print(f"   ‚úÖ PASSED: –ú–∞–ª—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–¥–∏—Ä—É—é—Ç—Å—è")

# –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (UTM-–ø–æ–¥–æ–±–Ω—ã–µ)
print("\nüß™ –¢–µ—Å—Ç 3.2: –°—Ä–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (UTM-–ø–æ–¥–æ–±–Ω—ã–µ)")
medium_coords = np.random.rand(10000) * 100000 + 500000  # 500,000 to 600,000
scale, offset = calculate_optimal_scale_offset(medium_coords)
print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: [{np.min(medium_coords):.2f}, {np.max(medium_coords):.2f}]")
print(f"   ‚Ä¢ Scale: {scale}, Offset: {offset:.2f}")
assert scale == 0.001, f"Expected scale 0.001, got {scale}"
validate_las_encoding(medium_coords, offset, scale, "medium coords")
print(f"   ‚úÖ PASSED: –°—Ä–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–¥–∏—Ä—É—é—Ç—Å—è")

# –¢–µ—Å—Ç 3: –ë–æ–ª—å—à–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
print("\nüß™ –¢–µ—Å—Ç 3.3: –ë–æ–ª—å—à–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ–≥—Ä–æ–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)")
large_coords = np.random.rand(10000) * 5000000  # 0 to 5,000,000
scale, offset = calculate_optimal_scale_offset(large_coords)
print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: [{np.min(large_coords):.2f}, {np.max(large_coords):.2f}]")
print(f"   ‚Ä¢ Scale: {scale}, Offset: {offset:.2f}")
assert scale >= 0.001, f"Expected scale >= 0.001, got {scale}"
validate_las_encoding(large_coords, offset, scale, "large coords")
print(f"   ‚úÖ PASSED: –ë–æ–ª—å—à–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–¥–∏—Ä—É—é—Ç—Å—è")

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
print("\nüß™ –¢–µ—Å—Ç 3.4: –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤")
test_coords = np.array([123.456789, 987.654321, 555.555555], dtype=np.float64)
scale, offset = calculate_optimal_scale_offset(test_coords)

# –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Python float (–∫–∞–∫ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ)
offset_py = np.float64(offset).item()
scale_py = np.float64(scale).item()

print(f"   ‚Ä¢ NumPy offset: {offset} (type: {type(offset).__name__})")
print(f"   ‚Ä¢ Python offset: {offset_py} (type: {type(offset_py).__name__})")
print(f"   ‚Ä¢ NumPy scale: {scale} (type: {type(scale).__name__})")
print(f"   ‚Ä¢ Python scale: {scale_py} (type: {type(scale_py).__name__})")

assert isinstance(offset_py, float), f"Expected Python float, got {type(offset_py)}"
assert isinstance(scale_py, float), f"Expected Python float, got {type(scale_py)}"
print(f"   ‚úÖ PASSED: –¢–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –¥–ª—è –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏")

# ============================================================================
# –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
# ============================================================================

print("\n" + "=" * 80)
print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
print("=" * 80)

print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
print(f"   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –£—Å–∫–æ—Ä–µ–Ω–∏–µ √ó{speedup:.1f} —Ä–∞–∑")
print(f"   ‚úÖ –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è LAS –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()} {platform.machine()}")

print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
if speedup > 10:
    print(f"   ‚Ä¢ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
    print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: √ó{speedup:.0f} —Ä–∞–∑")
else:
    print(f"   ‚Ä¢ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö bag —Ñ–∞–π–ª–∞—Ö")

print("\n" + "=" * 80)
