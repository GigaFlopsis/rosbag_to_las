#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∫–∞–º–µ—Ä—ã –∏–∑ ROS bag —Ñ–∞–π–ª–∞.

–ò–∑–≤–ª–µ–∫–∞–µ—Ç:
- –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—ä—ë–º–∫–∏ –∏–∑ /mavros/cam_imu_sync/cam_imu_stamp
- –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ /mavros/statustext/send (—Ñ–∏–ª—å—Ç—Ä [PHOTO]:)
- –ü–æ–∑–∏—Ü–∏–∏ –∏–∑ /mavros/local_position/odom —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π

–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç: CSV, JSON, –∏–ª–∏ Agisoft-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π TXT
"""

import rosbag
import os
import csv
import json
from datetime import datetime
from collections import defaultdict
import numpy as np
from scipy.interpolate import interp1d


class CameraPositionExtractor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∫–∞–º–µ—Ä—ã –∏–∑ ROS bag.
    """
    
    def __init__(self, bag_file):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞.
        
        Parameters:
            bag_file: –ü—É—Ç—å –∫ ROS bag —Ñ–∞–π–ª—É
        """
        self.bag_file = bag_file
        self.cam_imu_topic = "/mavros/cam_imu_sync/cam_imu_stamp"
        self.statustext_topic = "/mavros/statustext/send"
        self.odom_topic = "/mavros/local_position/odom"
        
        # –î–∞–Ω–Ω—ã–µ
        self.camera_frames = []  # {timestamp, seq_id}
        self.photo_names = {}    # {timestamp: filename}
        self.odometry_data = []  # {timestamp, x, y, z, qx, qy, qz, qw}
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.camera_positions = []
    
    def extract_data(self):
        """
        –ò–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ bag —Ñ–∞–π–ª–∞.
        """
        print("\n" + "=" * 80)
        print("üì¶ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó BAG –§–ê–ô–õ–ê")
        print("=" * 80)
        
        with rosbag.Bag(self.bag_file, 'r') as bag:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ø–∏–∫–æ–≤
            bag_info = bag.get_type_and_topic_info()
            
            topics_status = {
                self.cam_imu_topic: self.cam_imu_topic in bag_info.topics,
                self.statustext_topic: self.statustext_topic in bag_info.topics,
                self.odom_topic: self.odom_topic in bag_info.topics
            }
            
            print(f"\nüìã –°—Ç–∞—Ç—É—Å —Ç–æ–ø–∏–∫–æ–≤:")
            for topic, exists in topics_status.items():
                status = "‚úÖ –ù–ê–ô–î–ï–ù" if exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
                print(f"  {topic}: {status}")
            
            if not all(topics_status.values()):
                raise ValueError("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–ø–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ bag —Ñ–∞–π–ª–µ!")
            
            # –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
            print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            cam_count = 0
            photo_count = 0
            odom_count = 0
            
            for msg_tuple in bag.read_messages(topics=[
                self.cam_imu_topic,
                self.statustext_topic,
                self.odom_topic
            ]):
                topic = msg_tuple.topic
                msg = msg_tuple.message
                t = msg_tuple.timestamp
                
                if topic == self.cam_imu_topic:
                    # –ò–∑–≤–ª–µ—á—å –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–º–µ—Ä—ã
                    self.camera_frames.append({
                        'bag_timestamp': t.to_sec(),
                        'frame_timestamp': msg.frame_stamp.to_sec(),
                        'seq_id': msg.frame_seq_id
                    })
                    cam_count += 1
                
                elif topic == self.statustext_topic:
                    # –ò–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å [PHOTO]:)
                    text = msg.text
                    if '[PHOTO]:' in text:
                        # –ü–∞—Ä—Å–∏–Ω–≥: [PHOTO]: image_20250919_175100_691924_seq1000.jpg
                        filename = text.split('[PHOTO]:')[1].strip()
                        self.photo_names[t.to_sec()] = filename
                        photo_count += 1
                
                elif topic == self.odom_topic:
                    # –ò–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏—é –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                    pos = msg.pose.pose.position
                    orient = msg.pose.pose.orientation
                    
                    self.odometry_data.append({
                        'timestamp': t.to_sec(),
                        'x': pos.x,
                        'y': pos.y,
                        'z': pos.z,
                        'qx': orient.x,
                        'qy': orient.y,
                        'qz': orient.z,
                        'qw': orient.w
                    })
                    odom_count += 1
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   üì∏ –ú–µ—Ç–æ–∫ –∫–∞–º–µ—Ä—ã: {cam_count}")
            print(f"   üìù –ò–º—ë–Ω —Ñ–∞–π–ª–æ–≤: {photo_count}")
            print(f"   üéØ –ü–æ–∑–∏—Ü–∏–π –æ–¥–æ–º–µ—Ç—Ä–∏–∏: {odom_count}")
    
    def match_frames_with_filenames(self, max_time_diff=1.0):
        """
        –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–º–µ—Ä—ã —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤.
        
        Parameters:
            max_time_diff: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã)
        """
        print("\n" + "=" * 80)
        print("üîó –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ö–ê–î–†–û–í –° –ò–ú–ï–ù–ê–ú–ò –§–ê–ô–õ–û–í")
        print("=" * 80)
        
        matched = 0
        unmatched = 0
        
        for frame in self.camera_frames:
            cam_time = frame['bag_timestamp']
            
            # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ –∏–º—è —Ñ–∞–π–ª–∞
            best_match = None
            min_diff = float('inf')
            
            for photo_time, filename in self.photo_names.items():
                time_diff = abs(cam_time - photo_time)
                
                if time_diff < min_diff:
                    min_diff = time_diff
                    best_match = (photo_time, filename)
            
            if best_match and min_diff < max_time_diff:
                frame['filename'] = best_match[1]
                frame['filename_time_diff'] = min_diff
                matched += 1
            else:
                frame['filename'] = None
                frame['filename_time_diff'] = None
                unmatched += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
        print(f"   ‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {matched}")
        print(f"   ‚ö†Ô∏è  –ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {unmatched}")
        
        if matched > 0:
            time_diffs = [f['filename_time_diff'] for f in self.camera_frames if f['filename'] is not None]
            avg_diff = np.mean(time_diffs) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            max_diff = np.max(time_diffs) * 1000
            
            print(f"   üìà –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: {avg_diff:.2f} –º—Å")
            print(f"   üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {max_diff:.2f} –º—Å")
    
    def interpolate_positions(self):
        """
        –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–æ–º–µ—Ç—Ä–∏–∏.
        """
        print("\n" + "=" * 80)
        print("üéØ –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø –ü–û–ó–ò–¶–ò–ô")
        print("=" * 80)
        
        if len(self.odometry_data) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏!")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        odom_times = np.array([d['timestamp'] for d in self.odometry_data])
        odom_x = np.array([d['x'] for d in self.odometry_data])
        odom_y = np.array([d['y'] for d in self.odometry_data])
        odom_z = np.array([d['z'] for d in self.odometry_data])
        odom_qx = np.array([d['qx'] for d in self.odometry_data])
        odom_qy = np.array([d['qy'] for d in self.odometry_data])
        odom_qz = np.array([d['qz'] for d in self.odometry_data])
        odom_qw = np.array([d['qw'] for d in self.odometry_data])
        
        # –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä—ã
        interp_x = interp1d(odom_times, odom_x, kind='linear', bounds_error=False, fill_value='extrapolate')
        interp_y = interp1d(odom_times, odom_y, kind='linear', bounds_error=False, fill_value='extrapolate')
        interp_z = interp1d(odom_times, odom_z, kind='linear', bounds_error=False, fill_value='extrapolate')
        interp_qx = interp1d(odom_times, odom_qx, kind='linear', bounds_error=False, fill_value='extrapolate')
        interp_qy = interp1d(odom_times, odom_qy, kind='linear', bounds_error=False, fill_value='extrapolate')
        interp_qz = interp1d(odom_times, odom_qz, kind='linear', bounds_error=False, fill_value='extrapolate')
        interp_qw = interp1d(odom_times, odom_qw, kind='linear', bounds_error=False, fill_value='extrapolate')
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞
        interpolated = 0
        
        for frame in self.camera_frames:
            if frame['filename'] is None:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–¥—Ä—ã –±–µ–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å frame_timestamp –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
            frame_time = frame['frame_timestamp']
            
            try:
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
                x = float(interp_x(frame_time))
                y = float(interp_y(frame_time))
                z = float(interp_z(frame_time))
                qx = float(interp_qx(frame_time))
                qy = float(interp_qy(frame_time))
                qz = float(interp_qz(frame_time))
                qw = float(interp_qw(frame_time))
                
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.camera_positions.append({
                    'timestamp': frame_time,
                    'seq_id': frame['seq_id'],
                    'filename': frame['filename'],
                    'x': x,
                    'y': y,
                    'z': z,
                    'qx': qx,
                    'qy': qy,
                    'qz': qz,
                    'qw': qw
                })
                
                interpolated += 1
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è –∫–∞–¥—Ä–∞ {frame['seq_id']}: {e}")
        
        print(f"\n‚úÖ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {interpolated}")
        
        if interpolated == 0:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏!")
    
    def save_to_csv(self, output_file):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª.
        
        Parameters:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV: {output_file}")
        
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writerow([
                'timestamp', 'seq_id', 'filename',
                'x', 'y', 'z',
                'qx', 'qy', 'qz', 'qw'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for pos in self.camera_positions:
                writer.writerow([
                    pos['timestamp'],
                    pos['seq_id'],
                    pos['filename'],
                    pos['x'],
                    pos['y'],
                    pos['z'],
                    pos['qx'],
                    pos['qy'],
                    pos['qz'],
                    pos['qw']
                ])
        
        print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.camera_positions)} –ø–æ–∑–∏—Ü–∏–π")
    
    def save_to_json(self, output_file):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª.
        
        Parameters:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON: {output_file}")
        
        data = {
            'metadata': {
                'bag_file': self.bag_file,
                'export_time': datetime.now().isoformat(),
                'total_frames': len(self.camera_positions)
            },
            'frames': self.camera_positions
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.camera_positions)} –ø–æ–∑–∏—Ü–∏–π")
    
    def save_to_agisoft_txt(self, output_file):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å Agisoft Metashape.
        –§–æ—Ä–º–∞—Ç: filename x y z qx qy qz qw
        
        Parameters:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Agisoft TXT: {output_file}")
        
        with open(output_file, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            f.write("# Camera positions from ROS bag\n")
            f.write("# Format: filename x y z qx qy qz qw\n")
            f.write("#\n")
            
            # –î–∞–Ω–Ω—ã–µ
            for pos in self.camera_positions:
                f.write(f"{pos['filename']} "
                       f"{pos['x']:.6f} {pos['y']:.6f} {pos['z']:.6f} "
                       f"{pos['qx']:.6f} {pos['qy']:.6f} {pos['qz']:.6f} {pos['qw']:.6f}\n")
        
        print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.camera_positions)} –ø–æ–∑–∏—Ü–∏–π")
    
    def process(self, output_formats=['csv', 'json'], output_dir=None):
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        
        Parameters:
            output_formats: –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ ['csv', 'json', 'agisoft']
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä—è–¥–æ–º —Å bag —Ñ–∞–π–ª–æ–º)
        """
        print("=" * 80)
        print("üöÄ –ù–ê–ß–ê–õ–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ô –ö–ê–ú–ï–†–´")
        print("=" * 80)
        
        # 1. –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
        self.extract_data()
        
        # 2. –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–¥—Ä—ã —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
        self.match_frames_with_filenames()
        
        # 3. –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        self.interpolate_positions()
        
        # 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if output_dir is None:
            output_dir = os.path.dirname(self.bag_file)
        
        base_name = os.path.splitext(os.path.basename(self.bag_file))[0]
        
        print("\n" + "=" * 80)
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 80)
        
        for fmt in output_formats:
            if fmt == 'csv':
                output_file = os.path.join(output_dir, f"{base_name}_camera_positions.csv")
                self.save_to_csv(output_file)
            
            elif fmt == 'json':
                output_file = os.path.join(output_dir, f"{base_name}_camera_positions.json")
                self.save_to_json(output_file)
            
            elif fmt == 'agisoft':
                output_file = os.path.join(output_dir, f"{base_name}_camera_positions_agisoft.txt")
                self.save_to_agisoft_txt(output_file)
        
        print("\n" + "=" * 80)
        print("‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
        
        return self.camera_positions


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    """
    print("üé¨ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô –ö–ê–ú–ï–†–´ –ò–ó ROS BAG")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ bag —Ñ–∞–π–ª—É
    bag_file = input("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ ROS bag —Ñ–∞–π–ª—É: ").strip()
    bag_file = bag_file.strip('"').strip("'")
    
    if not os.path.exists(bag_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {bag_file}")
        return
    
    # –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞
    print("\nüìù –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞:")
    print("   1 - CSV (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)")
    print("   2 - JSON (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
    print("   3 - Agisoft TXT (–¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞–º–º–µ—Ç—Ä–∏–∏)")
    print("   4 - –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã")
    
    choice = input("\n–í—ã–±–æ—Ä (Enter –¥–ª—è CSV): ").strip()
    
    format_map = {
        '1': ['csv'],
        '2': ['json'],
        '3': ['agisoft'],
        '4': ['csv', 'json', 'agisoft'],
        '': ['csv']
    }
    
    output_formats = format_map.get(choice, ['csv'])
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞
    output_dir = input(f"\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (Enter –¥–ª—è '{os.path.dirname(bag_file)}'): ").strip()
    if not output_dir:
        output_dir = os.path.dirname(bag_file)
    
    try:
        # –°–æ–∑–¥–∞—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        extractor = CameraPositionExtractor(bag_file)
        extractor.process(output_formats=output_formats, output_dir=output_dir)
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤: {output_dir}")
        
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
